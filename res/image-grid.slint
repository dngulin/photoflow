import { VerticalScrollable } from "vertical-scrollable.slint";

export struct ImageGridItem {
    index: int,
    image: image,
    video-duration: string,
}

component DurationLabel inherits Rectangle {
    in property <length> font-size: 12px;
    in property <string> text;
    border-radius: self.font-size / 4;
    background: black;
    height: l.preferred-height;
    width: l.preferred-width;

    l := HorizontalLayout {
        padding: root.font-size / 4;
        padding-left: self.padding * 2;
        padding-right: self.padding-left;
        spacing: self.padding;

        i := Image {
            width: t.height;
            height: t.height;
            source: @image-url("img/video.svg");
        }

        t := Text {
            text: root.text;
            color: white;
            font-size: root.font-size;
            font-weight: 500;
            height: self.font-size * 1.618;
            vertical-alignment: center;
        }
    }
}

export component ImageGrid inherits VerticalScrollable {
    // Input
    forward-focus: fs;
    in-out property <bool> enabled: true;

    callback enter();
    callback exit();

    // Visual config
    in property <length> content-pad-size: 4px;
    in property <length> img-size: 235px;
    in property <length> img-pad-size: 2px;

    // Model setup
    in property <int> item-count: 0;
    in property <[ImageGridItem]> model;
    pure callback set-visible-range(offset: int, length: int);

    // Hack to auto-synchronise view-model range
    in property <bool> is-visible: true;
    visible: visibility-hook(is-visible);

    pure function visibility-hook(value: bool) -> bool {
        if (value) {
            set-visible-range(vis-offset, vis-length);
        }
        value
    }

    // Item size
    property <length> item-size: self.img-size + 2 * self.img-pad-size;

    // Rows & cols
    property <int> cols: min(floor(self.width / self.item-size), self.item-count);
    property <int> rows: cols == 0 ? 0 : ceil(self.item-count / self.cols);

    // Contents
    contents-w: self.width;
    contents-h: item-size * rows;

    // Model Items & Selection Indicator
    out property <int> selected-idx: 0;

    public function set-selected-idx(idx: int, prev-pos: length) {
        selected-idx = idx;
        if (selected-idx == 0) {
            self.set-viewport-pos(self.viewport-min, true);
        } else if (selected-idx == item-count - 1) {
            self.set-viewport-pos(self.viewport-max, true);
        } else {
            self.set-viewport-pos(prev-pos, true);
            self.update-viewport-pos(true);
        }
    }

    Rectangle {
        width: root.item-size * root.cols;
        height: root.item-size * root.rows;
        x: (root.width - self.width) * 0.5;

        for item in root.model: Rectangle {
            width: root.item-size;
            height: root.item-size;
            x: root.item-pos-x(item.index);
            y: root.item-pos-y(item.index);
            img := Image {
                width: root.img-size;
                height: root.img-size;
                x: root.img-pad-size;
                y: root.img-pad-size;
                source: item.image;
            }

            if item.video-duration != "": DurationLabel {
                x: img.x + img.width - self.width - 4px;
                y: img.y + 4px;
                text: item.video-duration;
            }
        }

        Rectangle {
            visible: root.item-count > 0;
            width: root.item-size;
            height: root.item-size;
            x: root.item-pos-x(root.selected-idx);
            y: root.item-pos-y(root.selected-idx);
            border-width: root.img-pad-size;
            border-color: white;
        }
    }

    fs := FocusScope {
        enabled: parent.enabled;

        key-pressed(event) => {
            if (!self.enabled) {
                reject
            }
            if (event.text == Key.RightArrow) {
                mv-selection-right();
                accept
            } else if (event.text == Key.LeftArrow) {
                mv-selection-left();
                accept
            } else if (event.text == Key.UpArrow) {
                mv-selection-up();
                accept
            } else if (event.text == Key.DownArrow) {
                mv-selection-down();
                accept
            } else if (event.text == Key.Return) {
                set-visible-range(0, 0);
                enter();
                accept
            } else if (event.text == Key.Escape) {
                exit();
                accept
            }
            accept
        }
    }

    pure function item-col(index: int) -> int {
        mod(index, cols)
    }

    pure function item-row(index: int) -> int {
        floor(index / cols)
    }

    pure function item-pos-x(index: int) -> length {
        item-col(index) * item-size
    }

    pure function item-pos-y(index: int) -> length {
        item-row(index) * item-size
    }

    // Move selection API
    public function mv-selection-right() {
        if (selected-idx < item-count - 1 && item-col(selected-idx + 1) > item-col(selected-idx)) {
            selected-idx += 1;
        }
    }

    public function mv-selection-left() {
        if (selected-idx > 0 && item-col(selected-idx - 1) < item-col(selected-idx)) {
            selected-idx -= 1;
        }
    }

    public function mv-selection-up() {
        if (item-row(max(selected-idx - cols, 0)) < item-row(selected-idx)) {
            selected-idx = max(selected-idx - cols, 0);
            update-viewport-pos(false);
        }
    }

    public function mv-selection-down() {
        if (item-row(min(selected-idx + cols, item-count - 1)) > item-row(selected-idx)) {
            selected-idx = min(selected-idx + cols, item-count - 1);
            update-viewport-pos(false);
        }
    }

    // Viewport Scrolling
    property <length> viewport-start: self.viewport-y;
    property <length> viewport-end: self.viewport-start + self.height;

    property <length> curr-item-start: item-pos-y(selected-idx);
    property <length> curr-item-end: self.curr-item-start + item-size;

    property <length> extra-scroll: item-size * 0.255;

    function update-viewport-pos(instant: bool) {
        if (self.viewport-start > self.curr-item-start) {
            set-viewport-pos(self.curr-item-start - extra-scroll, instant);
        } else if (self.viewport-end < self.curr-item-end) {
            set-viewport-pos(curr-item-end - self.height + extra-scroll, instant);
        }
    }

    property <length> viewport-min: 0 - content-pad-size;
    property <length> viewport-max: self.contents-h - self.height + content-pad-size;

    function set-viewport-pos(pos: length, instant: bool) {
        if (instant) {
            self.viewport-y = clamp(pos, viewport-min, viewport-max);
        } else {
            self.set-spring-scroll-target(clamp(pos, viewport-min, viewport-max));
        }
    }

    // Visible Range Reporting
    property <int> min-visible-row: floor(self.viewport-start / item-size);
    property <int> max-visible-row: ceil(self.viewport-end / item-size);

    property <int> vis-offset: clamp(min-visible-row * cols, 0, max(item-count - 1, 0));
    property <int> vis-length: clamp(max-visible-row * cols - vis-offset, 0, max(item-count - vis-offset, 0));
}
