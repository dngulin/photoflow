import { ImageGrid, ImageGridItem } from "image-grid.slint";
import { MediaViewer, MediaViewerModel } from "media-viewer.slint";
import { CircularProgressBar } from "circular-progress-bar.slint";

export global MediaViewerBridge {
    in property <MediaViewerModel> model;
    pure callback load(int);
    pure callback clear();
}

export enum Mode {
    PreIndexing,
    Indexing,
    Gallery,
    Viewer
}

export component PhotoFlowApp inherits Window {
    background: black;

    in-out property <Mode> mode: Indexing;

    in property <int> indexing-processed;
    in property <int> indexing-total;
    in property <string> indexing-error;

    property <int> item-count;
    property <int> selected-idx;
    property <int> max-selected-idx: max(0, item-count - 1);

    in property <[ImageGridItem]> grid-model;
    pure callback set-grid-visible-range(int, int);
    property <length> prev-viewport-pos;

    callback close();
    callback tick();

    if mode == Mode.PreIndexing: VerticalLayout {
        alignment: center;
        Image {
            height: parent.height / 10;
            source: @image-url("img/spinner.svg");
        }

        Text {
            text: indexing-error;
            horizontal-alignment: center;
            font-size: parent.height / 40;
            color: white;
        }
    }

    if mode == Mode.Indexing: VerticalLayout {
        alignment: center;
        CircularProgressBar {
            height: parent.height / 3;
            value: indexing-processed;
            maximum: indexing-total;
        }

        Text {
            text: indexing-error;
            horizontal-alignment: center;
            font-size: parent.height / 40;
            color: white;
        }
    }

    if mode == Mode.Gallery: ImageGrid {
        item-count: root.item-count;
        model: root.grid-model;

        set-visible-range(offset, length) => {
            root.set-grid-visible-range(offset, length)
        }

        init => {
            self.set-selected-idx(root.selected-idx, root.prev-viewport-pos);
            grid-focus-scope.focus();
        }

        grid-focus-scope := FocusScope {
            key-pressed(event) => {
                if (event.text == Key.RightArrow) {
                    parent.mv-selection-right();
                } else if (event.text == Key.LeftArrow) {
                    parent.mv-selection-left();
                } else if (event.text == Key.UpArrow) {
                    parent.mv-selection-up();
                } else if (event.text == Key.DownArrow) {
                    parent.mv-selection-down();
                } else if (event.text == Key.Return) {
                    parent.set-visible-range(0, 0);
                    root.prev-viewport-pos = parent.viewport-y;
                    root.selected-idx = parent.selected-idx;
                    root.mode = Mode.Viewer;
                } else if (event.text == Key.Escape) {
                    root.close();
                }
                accept
            }
        }
    }

    if mode == Mode.Viewer: MediaViewer {
        width: 100%;
        height: 100%;

        model: MediaViewerBridge.model;

        init => {
            MediaViewerBridge.load(root.selected-idx);
            img-focus-scope.focus();
        }

        img-focus-scope := FocusScope {
            key-pressed(event) => {
                if (event.text == Key.RightArrow) {
                    if (!parent.model.is-loading) {
                        root.selected-idx = clamp(root.selected-idx + 1, 0, root.max-selected-idx);
                        MediaViewerBridge.load(root.selected-idx);
                    }
                } else if (event.text == Key.LeftArrow) {
                    if (!parent.model.is-loading) {
                        root.selected-idx = clamp(root.selected-idx - 1, 0, root.max-selected-idx);
                        MediaViewerBridge.load(root.selected-idx);
                    }
                } else if (event.text == Key.Escape) {
                    MediaViewerBridge.clear();
                    root.mode = Mode.Gallery;
                }
                accept
            }
        }
    }

    public function set-item-count(count: int) {
        self.item-count = count;
        self.selected-idx = max(count - 1, 0);
    }

    Timer {
        interval: 16ms;
        running: true;
        triggered => {
            root.tick();
        }
    }
}
