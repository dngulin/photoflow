import { ImageGrid, ImageGridItem } from "image-grid.slint";
import { MediaViewer, MediaViewerModel, ViewerState } from "media-viewer.slint";
import { CircularProgressBar } from "circular-progress-bar.slint";

import { GamepadKey } from "gamepad.slint";
import { TimeFormatter } from "video-hud.slint";
export { GamepadKey, TimeFormatter }

export global MediaViewerBridge {
    in property <MediaViewerModel> model;
    pure callback load(index: int);
    pure callback clear();

    pure callback poll-video-state();
    pure callback video-set-playing(playing-state: bool);
    pure callback video-seek-progress(progress: float);
}

export enum Mode {
    PreIndexing,
    Indexing,
    Gallery,
    Viewer
}

export component PhotoFlowApp inherits Window {
    background: black;
    default-font-family: "Ubuntu";

    in-out property <Mode> mode: PreIndexing;

    in property <int> indexing-processed;
    in property <int> indexing-total;
    in property <string> indexing-error;

    property <int> item-count;
    property <int> selected-idx;
    property <int> max-selected-idx: max(0, item-count - 1);

    in property <[ImageGridItem]> grid-model;
    pure callback set-grid-visible-range(offset: int, length: int);
    property <length> prev-viewport-pos;

    callback close();

    if mode == Mode.PreIndexing: VerticalLayout {
        alignment: center;
        Image {
            height: parent.height / 10;
            source: @image-url("img/spinner.svg");
            rotation-angle: 360deg * mod(animation-tick(), 2s) / 2s;
        }

        Text {
            text: indexing-error;
            horizontal-alignment: center;
            font-size: parent.height / 40;
            color: white;
        }
    }

    if mode == Mode.Indexing: VerticalLayout {
        alignment: center;
        CircularProgressBar {
            height: parent.height / 3;
            value: indexing-processed;
            maximum: indexing-total;
        }

        Text {
            text: indexing-error;
            horizontal-alignment: center;
            font-size: parent.height / 40;
            color: white;
        }
    }

    if mode == Mode.Gallery: ImageGrid {
        item-count: root.item-count;
        model: root.grid-model;

        set-visible-range(offset, length) => {
            root.set-grid-visible-range(offset, length)
        }

        init => {
            self.set-selected-idx(root.selected-idx, root.prev-viewport-pos);
            self.focus();
        }

        enter => {
            root.prev-viewport-pos = self.viewport-y;
            root.selected-idx = self.selected-idx;
            root.mode = Mode.Viewer;
        }

        exit => {
            root.close();
        }
    }

    if mode == Mode.Viewer: MediaViewer {
        model: MediaViewerBridge.model;

        init => {
            MediaViewerBridge.load(root.selected-idx);
            self.focus();
        }

        next => {
            if (root.selected-idx < root.max-selected-idx) {
                root.selected-idx += 1;
                MediaViewerBridge.load(root.selected-idx);
            }
        }

        prev => {
            if (root.selected-idx > 0) {
                root.selected-idx -= 1;
                MediaViewerBridge.load(root.selected-idx);
            }
        }

        poll-video-state => {
            MediaViewerBridge.poll-video-state();
        }

        video-set-playing(playing-state) => {
            MediaViewerBridge.video-set-playing(playing-state);
        }

        video-seek-progress(progress) => {
            MediaViewerBridge.video-seek-progress(progress);
        }

        exit => {
            MediaViewerBridge.clear();
            root.mode = Mode.Gallery;
        }
    }

    public function set-item-count(count: int) {
        self.item-count = count;
        self.selected-idx = max(count - 1, 0);
    }
}
