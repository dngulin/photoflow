import { SpringConfig, SpringState, Spring } from "spring-animation.slint";
import { EveryFrameTimer } from "every-frame-timer.slint";

export enum ViewerState {
    Loading,
    Loaded,
    FailedToLoad
}

export struct MediaViewerModel {
    state: ViewerState,
    file-name: string,
    image: image,
    is-video: bool,
    video-progress: float,
}

export component MediaViewer inherits Rectangle {
    width: 100%;
    height: 100%;
    clip: true;

    in property <MediaViewerModel> model;

    forward-focus: fs;
    in-out property <bool> enabled: true;

    callback next();
    callback prev();
    callback exit();

    pure callback poll-video-state();
    callback video-play-pause();

    if model.state != ViewerState.FailedToLoad: Image {
        width: 100%;
        height: 100%;
        image-fit: contain;
        source: model.image;
    }

    private property <bool> video-active: model.is-video && model.state == ViewerState.Loaded;

    if video-active: Rectangle {
        width: parent.width;
        height: 4px;
        x: 0;
        y: parent.height - self.height;

        Rectangle {
            x: 0;
            y: 0;
            height: parent.height;
            width: root.model.video-progress * parent.width;
            background: white;
        }

        visible: self.is-visible();
        pure function is-visible() -> bool {
            poll-video-state();
            true
        }
    }

    spinner := Image {
        x: parent.width - self.width;
        y: parent.height - self.height;
        source: @image-url("img/spinner.svg");
        rotation-angle: 360deg * mod(animation-tick(), 2s) / 2s;

        private property <SpringState> spring: { current-value: traget-opacity, target-value: traget-opacity };
        private property <SpringConfig> spring-cfg: { stiffness: 500, damping: 40, mass: 1 };

        opacity: spring.current-value;

        property <float> traget-opacity: model.state == ViewerState.Loading ? 1 : 0;
        changed traget-opacity => {
            spring = Spring.start(self.opacity, self.traget-opacity, spring.velocity);
        }

        pure function animation-active() -> bool {
            Spring.is-active(spring)
        }

        function update-animation(dt: duration) {
            spring = Spring.update(spring-cfg, spring, dt / 1s);
        }
    }

    if spinner.animation-active(): EveryFrameTimer {
        triggered(dt) => {
            spinner.update-animation(dt);
        }
    }

    if model.state == ViewerState.FailedToLoad: Text {
        text: model.file-name;
        color: white;
        vertical-alignment: center;
        horizontal-alignment: center;
    }

    fs := FocusScope {
        enabled: parent.enabled;
        key-pressed(event) => {
            if (!self.enabled) {
                reject
            }
            if (event.text == Key.RightArrow) {
                if (model.state != ViewerState.Loading) {
                    next();
                }
                accept
            } else if (event.text == Key.LeftArrow) {
                if (model.state != ViewerState.Loading) {
                    prev();
                }
                accept
            } else if (event.text == Key.Return) {
                if (!event.repeat && model.state == ViewerState.Loaded && model.is-video) {
                    video-play-pause();
                }
                accept
            } else if (event.text == Key.Escape) {
                exit();
                accept
            }
            reject
        }
    }
}
