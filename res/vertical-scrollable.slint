export component VerticalScrollable inherits Rectangle {
    width: 100%;
    height: 100%;
    clip: true;

    in property <length> contents-w;
    in property <length> contents-h;

    in-out property <length> viewport-x;
    in-out property <length> viewport-y;

    in property <float> spring-scroll-stiffness: 700;
    in property <float> spring-scroll-damping: 40;
    in property <float> spring-scroll-mass: 1;

    public function set-spring-scroll-target(target: length) {
        spring.tgt-value = target;
        spring.running = true;
    }

    Rectangle {
        x: -root.viewport-x;
        y: -root.viewport-y;
        width: root.contents-w;
        height: root.contents-h;
        @children
    }

    spring := Timer {
        interval: 1s / 60;
        running: false;

        in property <float> stiffness: root.spring-scroll-stiffness;
        in property <float> damping: root.spring-scroll-damping;
        in property <float> mass: root.spring-scroll-mass;

        property <length> tgt-value;

        property <length> displacement: root.viewport-y - self.tgt-value;
        property <float> stiffness-force: -displacement / 1px * stiffness;

        property <float> velocity: 0;
        property <float> damping-force: -velocity * damping;

        property <float> dt: self.interval / 1s;

        triggered => {
            self.velocity += (self.stiffness-force + self.damping-force) / self.mass * dt;
            root.viewport-y += self.velocity * dt * 1px;

            if (displacement < 1phx && abs(self.velocity * dt) < 0.1) {
                self.velocity = 0;
                root.viewport-y = self.tgt-value;
                self.running = false;
            }
        }
    }
}
